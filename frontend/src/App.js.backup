import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { CssBaseline, Box } from '@mui/material';
import { QueryClient, QueryClientProvider } from 'react-query';
import { Provider } from 'react-redux';
import { Toaster } from 'react-hot-toast';

// Context and Store
import { AuthProvider } from './context/AuthContext';
import { store } from './store/store';

// Components
import Navbar from './components/layout/Navbar';
import Footer from './components/layout/Footer';
import ProtectedRoute from './components/auth/ProtectedRoute';
import LoadingSpinner from './components/common/LoadingSpinner';

// Pages
import HomePage from './pages/HomePage';
import LoginPage from './pages/auth/LoginPage';
import RegisterPage from './pages/auth/RegisterPage';
import ServicesPage from './pages/services/ServicesPage';
import ServiceDetailsPage from './pages/services/ServiceDetailsPage';

// User Pages
import UserDashboard from './pages/user/UserDashboard';
import UserApplications from './pages/user/UserApplications';
import ApplicationForm from './pages/user/ApplicationForm';
import UserProfile from './pages/user/UserProfile';

// Staff Pages
import StaffDashboard from './pages/staff/StaffDashboard';
import StaffApplications from './pages/staff/StaffApplications';
import ApplicationReview from './pages/staff/ApplicationReview';

// Admin Pages
import AdminDashboard from './pages/admin/AdminDashboard';
import AdminUsers from './pages/admin/AdminUsers';
import AdminServices from './pages/admin/AdminServices';
import AdminApplications from './pages/admin/AdminApplications';
import AdminReports from './pages/admin/AdminReports';

// Error Pages
import NotFoundPage from './pages/error/NotFoundPage';
import UnauthorizedPage from './pages/error/UnauthorizedPage';

// Create React Query client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

// Create Material-UI theme
const theme = createTheme({
  palette: {
    primary: {
      main: '#2e7d32', // Green for government theme
      light: '#60ad5e',
      dark: '#005005',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#ff6f00', // Orange accent
      light: '#ffb74d',
      dark: '#c43e00',
      contrastText: '#ffffff',
    },
    background: {
      default: '#f5f5f5',
      paper: '#ffffff',
    },
    text: {
      primary: '#333333',
      secondary: '#666666',
    },
  },
  typography: {
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    h1: {
      fontSize: '2.5rem',
      fontWeight: 600,
      color: '#2e7d32',
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 600,
      color: '#2e7d32',
    },
    h3: {
      fontSize: '1.75rem',
      fontWeight: 500,
      color: '#2e7d32',
    },
    h4: {
      fontSize: '1.5rem',
      fontWeight: 500,
    },
    h5: {
      fontSize: '1.25rem',
      fontWeight: 500,
    },
    h6: {
      fontSize: '1rem',
      fontWeight: 500,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 8,
          padding: '10px 24px',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 12px rgba(0,0,0,0.08)',
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: 8,
          },
        },
      },
    },
  },
});

function App() {
  return (
    <Provider store={store}>
      <QueryClientProvider client={queryClient}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <AuthProvider>
            <Router>
              <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
                <Navbar />
                
                <Box component="main" sx={{ flexGrow: 1, pt: 8 }}>
                  <Routes>
                    {/* Public Routes */}
                    <Route path="/" element={<HomePage />} />
                    <Route path="/login" element={<LoginPage />} />
                    <Route path="/register" element={<RegisterPage />} />
                    <Route path="/services" element={<ServicesPage />} />
                    <Route path="/services/:serviceId" element={<ServiceDetailsPage />} />
                    
                    {/* Protected User Routes */}
                    <Route path="/dashboard" element={
                      <ProtectedRoute roles={['user']}>
                        <UserDashboard />
                      </ProtectedRoute>
                    } />
                    <Route path="/my-applications" element={
                      <ProtectedRoute roles={['user']}>
                        <UserApplications />
                      </ProtectedRoute>
                    } />
                    <Route path="/apply/:serviceId" element={
                      <ProtectedRoute roles={['user']}>
                        <ApplicationForm />
                      </ProtectedRoute>
                    } />
                    <Route path="/profile" element={
                      <ProtectedRoute roles={['user', 'staff', 'officer', 'admin']}>
                        <UserProfile />
                      </ProtectedRoute>
                    } />
                    
                    {/* Protected Staff Routes */}
                    <Route path="/staff/dashboard" element={
                      <ProtectedRoute roles={['staff', 'officer', 'admin']}>
                        <StaffDashboard />
                      </ProtectedRoute>
                    } />
                    <Route path="/staff/applications" element={
                      <ProtectedRoute roles={['staff', 'officer', 'admin']}>
                        <StaffApplications />
                      </ProtectedRoute>
                    } />
                    <Route path="/staff/applications/:applicationId" element={
                      <ProtectedRoute roles={['staff', 'officer', 'admin']}>
                        <ApplicationReview />
                      </ProtectedRoute>
                    } />
                    
                    {/* Protected Admin Routes */}
                    <Route path="/admin/dashboard" element={
                      <ProtectedRoute roles={['officer', 'admin']}>
                        <AdminDashboard />
                      </ProtectedRoute>
                    } />
                    <Route path="/admin/users" element={
                      <ProtectedRoute roles={['officer', 'admin']}>
                        <AdminUsers />
                      </ProtectedRoute>
                    } />
                    <Route path="/admin/services" element={
                      <ProtectedRoute roles={['officer', 'admin']}>
                        <AdminServices />
                      </ProtectedRoute>
                    } />
                    <Route path="/admin/applications" element={
                      <ProtectedRoute roles={['officer', 'admin']}>
                        <AdminApplications />
                      </ProtectedRoute>
                    } />
                    <Route path="/admin/reports" element={
                      <ProtectedRoute roles={['officer', 'admin']}>
                        <AdminReports />
                      </ProtectedRoute>
                    } />
                    
                    {/* Error Routes */}
                    <Route path="/unauthorized" element={<UnauthorizedPage />} />
                    <Route path="/404" element={<NotFoundPage />} />
                    <Route path="*" element={<Navigate to="/404" replace />} />
                  </Routes>
                </Box>
                
                <Footer />
              </Box>
            </Router>
            
            {/* Global Toast Notifications */}
            <Toaster
              position="top-right"
              toastOptions={{
                duration: 4000,
                style: {
                  background: '#333',
                  color: '#fff',
                },
                success: {
                  duration: 3000,
                  theme: {
                    primary: '#2e7d32',
                    secondary: '#fff',
                  },
                },
              }}
            />
          </AuthProvider>
        </ThemeProvider>
      </QueryClientProvider>
    </Provider>
  );
}

export default App;
